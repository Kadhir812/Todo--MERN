name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: todo-backend
  FRONTEND_IMAGE_NAME: todo-frontend
  IMAGE_OWNER: kadhir812
  
jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Applications

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            Backend/package-lock.json
            Frontend/package-lock.json

      # --- Backend ---
      - name: Install Backend Dependencies
        working-directory: ./Backend
        run: npm ci

      - name: Run Backend Linting
        working-directory: ./Backend
        run: |
          if npx eslint -v >/dev/null 2>&1; then
            npx eslint . --ext .js --ignore-pattern node_modules/
          else
            echo "No ESLint config found. Skipping lint."
          fi

      - name: Run Backend Tests
        working-directory: ./Backend
        env:
          MONGO_URI: "mongodb://localhost:27017"
          MONGO_DBNAME: "todo_app_test"
          NODE_ENV: "test"
        run: |
          if npm run | grep -q "test"; then
            npm test -- --ci --coverage
          else
            echo "No test script found. Running syntax check instead."
            node -c server.js
          fi
        

      # --- Frontend ---
      - name: Install Frontend Dependencies
        working-directory: ./Frontend
        run: npm ci

      - name: Run Frontend Linting
        working-directory: ./Frontend
        run: |
          if npm run | grep -q "lint"; then
            npm run lint
          else
            echo "No lint script found. Skipping lint."
          fi

      - name: Build Frontend
        working-directory: ./Frontend
        run: npm run build

      - name: Run Frontend Tests
        working-directory: ./Frontend
        run: |
          if npm run | grep -q "test"; then
            npm test
          else
            echo "No test script found. Build verification passed."
          fi

  build-scan-push:
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Setup Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3️⃣ Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 4️⃣ Set image tag — use run number
      - name: Set image tag
        id: vars
        run: echo "TAG=v${{ github.run_number }}" >> $GITHUB_ENV

      # 5️⃣ Build Docker image (local only for scan first)
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service == 'backend' && 'Backend' || 'Frontend' }}
          file: ./${{ matrix.service == 'backend' && 'Backend/Dockerfile' || 'Frontend/Dockerfile.prod' }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/todo-${{ matrix.service }}:${{ env.TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/todo-${{ matrix.service }}:latest

  deploy:
    needs: build-scan-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/master'

    env:
      REGISTRY: docker.io
      OWNER: kadhir812
      BACKEND: todo-backend
      FRONTEND: todo-frontend
      TAG: latest # or use ${{ env.TAG }} for versioned deploy

    steps:
      - uses: actions/checkout@v4

      # 1️⃣ Log in to Docker Hub
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 2️⃣ Pull new images
      - name: Pull images
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.BACKEND }}:${{ env.TAG }}
          docker pull ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.FRONTEND }}:${{ env.TAG }}

      # 3️⃣ Stop & remove old containers
      - name: Stop old containers
        shell: cmd
        run: |
          docker stop todo-backend  || ver >null
          docker stop todo-frontend || ver >null
          docker rm   todo-backend  || ver >null
          docker rm   todo-frontend || ver >null

      # 3️⃣ Create custom Docker network if not exists
      - name: Create Docker network
        shell: powershell
        run: |
          docker network inspect mern-network >/dev/null 2>&1 -or docker network create mern-network

      # 4️⃣ Start new backend container
      - name: Start backend
        run: |
          docker run -d --name todo-backend \
            --network mern-network \
            -p 5000:5000 \
            -e NODE_ENV=production \
            -e MONGODB_URI=mongodb://mongod:27017 \
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.BACKEND }}:${{ env.TAG }}

      # 5️⃣ Start new frontend container
      - name: Start frontend
        run: |
          docker run -d --name todo-frontend \
            --network mern-network \
            -p 3000:80 \
            -e VITE_API_URL=http://todo-backend:5050 \
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.FRONTEND }}:${{ env.TAG }}

      # 6️⃣ Prune unused images (older than 24h)
      - name: Clean up
        run: |
          docker image prune -af --filter "until=24h"

